clc; clear all; close all;

load('ant1_mi8.mat')
[gnssMeas] = ProcessGnssMeas(gnssRaw);
A = gnssMeas;
load('ant3_mi8.mat')
[gnssMeas] = ProcessGnssMeas(gnssRaw);
B = gnssMeas;

t1 = A.FctSeconds;
t2 = B.FctSeconds;
t = intersect(t1,t2);

for ii=1:length(t)
    idx1(ii) = find(t1==t(ii));
    idx2(ii) = find(t2==t(ii));
end


ADR_Ap = A.AdrM(idx1,1)
ADR_Bp = B.AdrM(idx2,1)

ADR_Aq = A.AdrM(idx1,2)
ADR_Bq = B.AdrM(idx2,2)
    
DD = ADR_Ap - ADR_Bp - ADR_Aq + ADR_Bq;

svid = gnssMeas.Svid;

ttxSeconds = gnssMeas.tTxSeconds(i,j);
if isnan(ttxSeconds)
    continue %skip to next
end
[gpsEph,iSv]= ClosestGpsEph(allGpsEph,svid(j),gnssMeas.FctSeconds(i));
if isempty(iSv)
    continue; %skip to next
end
%compute pr for this sv
dtsv = GpsEph2Dtsv(gpsEph,ttxSeconds);
ttxSeconds = ttxSeconds - dtsv;%subtract dtsv from sv time to get true gps time

%calculate satellite position at ttx:
[svXyzTtxM,dtsv]=GpsEph2Xyz(gpsEph,[weekNum(i),ttxSeconds]);
%in ECEF coordinates at trx:
dtflightSeconds = norm(xyz0M - svXyzTtxM)/GpsConstants.LIGHTSPEED;
svXyzTrxM = FlightTimeCorrection(svXyzTtxM, dtflightSeconds);


for ii=1:length(t)
G_1 = [(x1(1)-xa(1));...
       (x1(2)-xa(2));...
       (x1(3)-xa(3))];
G_2 = [(x2(1)-xa(1));...
       (x2(2)-xa(2));...
       (x2(3)-xa(3))];

geo_range_p_a(ii) = norm(G_2);

G_1 = G_1/norm(G_1);
G_2 = G_2/norm(G_2);
G = G_2 - G_1;

res.L1C = DD - G'*(xb-xa)';
end
return
for ii=1:length(A.PrM(1,:))/2
    
    
    figure()
    
    
    return
    A.AdrM(:,ii*2-1)
    B.AdrM(:,ii*2-1)
end

function sat_xyz = 